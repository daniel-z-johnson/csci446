1. Though HTTP protocols are stateless it possible to emulated statefulness through cookies. The cookies will store session ids and from those ids the sever will be able to change the web-page to the proper state for th user. This also can be done through the url though it is more work and hassle than the cookie storing an session id.

It also possible to change the state dynamically with Javascript. This is usually done with a JavaScript library such as JQuery. The Javascript usually makes a request to the server and receives information. Using this information it can post information on the page as it changes.

2. A great thing about using third-party libraries for authentication is that it is often possible to have the library generate everything that is needed for authentication, and everything will work, if it is a good library. You need not worry about hashing and slating the password or making sure the input from the user is censored when it comes to password and confirm password. It is all done for you already.

One disadvantage though that is sometimes a hassle to make changes to the generated authentication if you need to make changes. Also, some third-party authentication may add a lot more than you need or want. So sometimes it is very advantageous to roll your own authentication rather than relying on someone else's, though make sure to not to store the password as plain text and censored the user's input when it comes to the password.

3. The way that rails manages is through migrations. Migrations are ruby source files that are generated for models in order to tell the database what tables to make and when to modify a table. Migrations currently begin with several numbers then an underscore then the name of the migration. The numbers are in the form of yyyyMMddhhmmss. This is so rails can keep track of which migration came before another migration. It also helps rails know which migration has been applied and which ones haven't been applied. These numbers are called the ID and it should be unique to the migration.

I believe that migrations are effective tool to keep track of database schema changes. Each migration can be executed separately making it effective for version control on the database. It simplifies altering your database by handling all the SQL for you and replacing them with simple commands such as add_column, rename_column, and change_column. Migrations also allow the user to set restrictions on the columns such as default values and disallowing null values. Though SQL is not difficult it is nice to have a way to simplify it with ruby code. Though if one feels the need to use SQL one can, though it shouldn't necessary unless one wants something very pacific or something that rails thinks is a bad idea like having a non-integer be the primary key.

One of the few disadvantages of migrations is that it is theoretical possible when multiply people are writing migrations for the same rails project to get two migrations with the same ID. If this happens rails should throw an error or something will brake in the application. Also, it is possible that when a migrations fails, for whatever reason, that the parts of the migration that succeeded will have to be rolled back my hand or the database dropped and the all the migration will have to be re applied, if there is data in the database then it will have to be restored from a back up the most recent back up if there is a back up, there should be one.

4. Since I think of walking the dog and feeding the dog as functions it doesn't really fit into CRUD, because CRUD usually means a relational database and relational databases do not support storing functions. The function will have to be independent of the data and when someone walks the dog data from the data from the database will have to be fed into the function and then the data will be updated appropriately. This is can be bad because everyone working on the data will have to know of walking the dog function and what it does.

SOAP stand for simple object access protocol and relies on XML to pass around structured information. WSDL stands for web service description language and it is a xml language that is used for describing how web service is supposed to act. It is machine readable, it describes what services are supported how to call them and what parameters it expects.

SOAP relies more on XML and RESTful relies on HTTP protocols such as get and post. SOAP seems to be better at transferring attachments.

5. 
